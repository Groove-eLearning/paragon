{"componentChunkName":"component---src-templates-component-page-template-jsx","path":"/components/form/form-checkbox/","result":{"data":{"mdx":{"id":"9b0e198e-a137-5862-9d62-d432cef8fb95","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Form.Checkbox\",\n  \"type\": \"component\",\n  \"components\": [\"FormCheckbox\"],\n  \"categories\": [\"Forms\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A simple checkbox for use with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Form.CheckboxSet\"), \".\"), mdx(\"p\", null, \"Note: extra props added to this component are passed as attributes to the\\nunderlying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"input\"), \" node. See MDN for documentation on available\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes\"\n  }, \"input attributes\"), \".\"), mdx(\"h3\", null, \"Controlled Standalone Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"() => {\\n  const [isChecked, setChecked] = useState(false);\\n  const handleChange = e => setChecked(e.target.checked);\\n  return (\\n    <Form.Checkbox checked={isChecked} onChange={handleChange}>\\n      I want pizza.\\n    </Form.Checkbox>\\n  );\\n}\\n\")), mdx(\"h3\", null, \"Controlled Group Usage with useCheckboxSetValues\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useCheckboxSetValues(initialValues[])\"), \" returns an array: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[state, dispatchers]\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dispatchers\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add(value)\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remove(value)\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set(values[])\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clear()\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"() => {\\n\\n  const [colorValues, { add, remove }] = useCheckboxSetValues(['green']);\\n\\n  const handleChange = e => {\\n    if (e.target.checked) {\\n      add(e.target.value);\\n    } else {\\n      remove(e.target.value);\\n    }\\n  }\\n  return (\\n    <Form.Group>\\n      <Form.Label>Which Color?</Form.Label>\\n      <Form.CheckboxSet\\n        name=\\\"colors\\\"\\n        onChange={handleChange}\\n        value={colorValues}\\n      >\\n        <Form.Checkbox value=\\\"red\\\">Red</Form.Checkbox>\\n        <Form.Checkbox value=\\\"green\\\">Green</Form.Checkbox>\\n        <Form.Checkbox value=\\\"blue\\\">Blue</Form.Checkbox>\\n        <Form.Checkbox value=\\\"cyan\\\" disabled>Cyan</Form.Checkbox>\\n      </Form.CheckboxSet>\\n    </Form.Group>\\n  );\\n}\\n\")), mdx(\"h3\", null, \"Uncontrolled Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<Form.Group>\\n  <Form.Label>Which Color?</Form.Label>\\n  <Form.CheckboxSet\\n    name=\\\"color-two\\\"\\n    onChange={(e) => console.log(e.target.value)}\\n    defaultValue={['green']}\\n  >\\n    <Form.Checkbox value=\\\"red\\\">Red</Form.Checkbox>\\n    <Form.Checkbox value=\\\"green\\\">Green</Form.Checkbox>\\n    <Form.Checkbox value=\\\"blue\\\">Blue</Form.Checkbox>\\n    <Form.Checkbox value=\\\"cyan\\\" disabled>Cyan</Form.Checkbox>\\n  </Form.CheckboxSet>\\n</Form.Group>\\n\")), mdx(\"h3\", null, \"Indeterminate Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"() => {\\n  const allCheeseOptions = ['swiss', 'cheddar', 'pepperjack'];\\n  const [checkedCheeses, { add, remove, set, clear }] = useCheckboxSetValues(['swiss']);\\n\\n  const handleChange = e => {\\n    e.target.checked ? add(e.target.value) : remove(e.target.value);\\n  };\\n\\n  const handleCheckAllChange = e => {\\n    e.target.checked ? set(allCheeseOptions) : clear();\\n  };\\n\\n  const allChecked = allCheeseOptions.every(value => checkedCheeses.includes(value));\\n  const someChecked = allCheeseOptions.some(value => checkedCheeses.includes(value));\\n  const isIndeterminate = someChecked && !allChecked;\\n\\n  return (\\n    <>\\n      <Form.Checkbox\\n        checked={allChecked}\\n        isIndeterminate={isIndeterminate}\\n        onChange={handleCheckAllChange}\\n      >\\n        All the cheese\\n      </Form.Checkbox>\\n      <Form.CheckboxSet\\n        className=\\\"p-2\\\"\\n        value={checkedCheeses}\\n        onChange={handleChange}\\n      >\\n        <Form.Checkbox value=\\\"swiss\\\">Swiss</Form.Checkbox>\\n        <Form.Checkbox value=\\\"cheddar\\\">Cheddar</Form.Checkbox>\\n        <Form.Checkbox value=\\\"pepperjack\\\">Pepperjack</Form.Checkbox>\\n      </Form.CheckboxSet>\\n    </>\\n  );\\n}\\n\")), mdx(\"h3\", null, \"Inline layout\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<Form.Group>\\n  <Form.Label>Which Color?</Form.Label>\\n  <Form.CheckboxSet\\n    name=\\\"color-three\\\"\\n    onChange={(e) => console.log(e.target.value)}\\n    defaultValue={['green']}\\n    isInline\\n  >\\n    <Form.Checkbox value=\\\"red\\\">Red</Form.Checkbox>\\n    <Form.Checkbox value=\\\"green\\\">Green</Form.Checkbox>\\n    <Form.Checkbox value=\\\"blue\\\">Blue</Form.Checkbox>\\n    <Form.Checkbox value=\\\"cyan\\\" disabled>Cyan</Form.Checkbox>\\n  </Form.CheckboxSet>\\n</Form.Group>\\n\")), mdx(\"h3\", null, \"Validation\"), mdx(\"h4\", null, \"Group Level Validation\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<Form.Group isInvalid>\\n  <Form.Label>Which Color?</Form.Label>\\n  <Form.CheckboxSet\\n    name=\\\"color-five\\\"\\n    onChange={(e) => console.log(e.target.value)}\\n  >\\n    <Form.Checkbox value=\\\"red\\\">Red</Form.Checkbox>\\n    <Form.Checkbox value=\\\"green\\\">Green</Form.Checkbox>\\n    <Form.Checkbox value=\\\"blue\\\">Blue</Form.Checkbox>\\n    <Form.Checkbox value=\\\"cyan\\\" disabled>Cyan</Form.Checkbox>\\n  </Form.CheckboxSet>\\n  <Form.Control.Feedback>\\n    Please choose an option.\\n  </Form.Control.Feedback>\\n</Form.Group>\\n\")), mdx(\"h4\", null, \"Individual option validation\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<Form.Group>\\n  <Form.Label>Which Color?</Form.Label>\\n  <Form.CheckboxSet name=\\\"color-four\\\">\\n    <Form.Checkbox\\n      value=\\\"red\\\"\\n      description=\\\"Red's cool\\\"\\n    >\\n      Red\\n    </Form.Checkbox>\\n    <Form.Checkbox\\n      value=\\\"green\\\"\\n      description=\\\"Excellent choice\\\"\\n      isValid\\n    >\\n      Green\\n    </Form.Checkbox>\\n    <Form.Checkbox\\n      value=\\\"blue\\\"\\n      description=\\\"Poor choice\\\"\\n      isInvalid\\n    >\\n      Blue\\n    </Form.Checkbox>\\n    <Form.Checkbox\\n      value=\\\"cyan\\\"\\n      disabled\\n    >\\n      Cyan\\n    </Form.Checkbox>\\n  </Form.CheckboxSet>\\n</Form.Group>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Form.Checkbox","status":"New","notes":""}},"components":{"nodes":[{"displayName":"FormCheckbox","props":[{"defaultValue":null,"name":"children","type":{"name":"node","raw":null,"value":null},"required":true,"docblock":"","doclets":[],"description":{"id":"5c18d628-7868-51e3-822d-e850a29af4a8","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"c130ad59-747a-573b-802e-963bf244de55","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"controlClassName","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"ee583924-c097-5a73-9907-f71b104418c7","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"labelClassName","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"3e020c25-adac-51cf-91c8-072498b7883d","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"description","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"973ca5f3-6661-5105-8321-cc0c7509c663","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"isInvalid","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"00a5a996-4ca4-54cc-b98e-941b7604fdef","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"isValid","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"f01b006d-2a13-55bf-8b9b-bbeea1a0e1e2","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"9b0e198e-a137-5862-9d62-d432cef8fb95","components":["FormCheckbox"]}},"staticQueryHashes":["1303225137","3649515864","63159454"]}