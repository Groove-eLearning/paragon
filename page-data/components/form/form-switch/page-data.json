{"componentChunkName":"component---src-templates-component-page-template-jsx","path":"/components/form/form-switch/","result":{"data":{"mdx":{"id":"07b0c1ef-6f86-5271-829e-fd78d8761932","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Form.Switch\",\n  \"type\": \"component\",\n  \"components\": [\"FormSwitch\", \"SwitchControl\"],\n  \"categories\": [\"Forms\"],\n  \"status\": \"New\",\n  \"designStatus\": \"Done\",\n  \"devStatus\": \"Done\",\n  \"notes\": \"\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A switch control for use with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Form.SwitchSet\"), \". This component has identical\\nprops to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Form.Checkbox\"), \" and is interoperable with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Form.SwitchSet\"), \" and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useCheckboxSetValues\"), \".\"), mdx(\"p\", null, \"Note: extra props added to this component are passed as attributes to the\\nunderlying \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"input\"), \" node. See MDN for documentation on available\\n\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attributes\"\n  }, \"input attributes\"), \".\"), mdx(\"h3\", {\n    \"id\": \"controlled-standalone-usage\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#controlled-standalone-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Controlled Standalone Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"() => {\\n  const [isChecked, setChecked] = useState(false);\\n  const handleChange = e => setChecked(e.target.checked);\\n  return (\\n    <Form.Switch checked={isChecked} onChange={handleChange}>\\n      I want pizza.\\n    </Form.Switch>\\n  );\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"unlabeled-control\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#unlabeled-control\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Unlabeled control\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"() => {\\n  const [isChecked, setChecked] = useState(false);\\n  const handleChange = e => setChecked(e.target.checked);\\n  return (\\n    <SwitchControl\\n      checked={isChecked}\\n      onChange={handleChange}\\n    />\\n  );\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"controlled-group-usage-with-usecheckboxsetvalues\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#controlled-group-usage-with-usecheckboxsetvalues\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Controlled Group Usage with useCheckboxSetValues\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useCheckboxSetValues(initialValues[])\"), \" returns an array: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[state, dispatchers]\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dispatchers\"), \" includes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"add(value)\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"remove(value)\"), \" \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set(values[])\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clear()\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"() => {\\n\\n  const [colorValues, { add, remove }] = useCheckboxSetValues(['green']);\\n\\n  const handleChange = e => {\\n    if (e.target.checked) {\\n      add(e.target.value);\\n    } else {\\n      remove(e.target.value);\\n    }\\n  }\\n  return (\\n    <Form.Group>\\n      <Form.Label>Which Color?</Form.Label>\\n      <Form.SwitchSet\\n        name=\\\"colors\\\"\\n        onChange={handleChange}\\n        value={colorValues}\\n      >\\n        <Form.Switch value=\\\"red\\\">Red</Form.Switch>\\n        <Form.Switch value=\\\"green\\\">Green</Form.Switch>\\n        <Form.Switch value=\\\"blue\\\">Blue</Form.Switch>\\n        <Form.Switch value=\\\"cyan\\\" disabled>Cyan</Form.Switch>\\n      </Form.SwitchSet>\\n    </Form.Group>\\n  );\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"uncontrolled-usage\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#uncontrolled-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Uncontrolled Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<Form.Group>\\n  <Form.Label>Which Color?</Form.Label>\\n  <Form.SwitchSet\\n    name=\\\"color-two\\\"\\n    onChange={(e) => console.log(e.target.value)}\\n    defaultValue={['green']}\\n  >\\n    <Form.Switch value=\\\"red\\\">Red</Form.Switch>\\n    <Form.Switch value=\\\"green\\\">Green</Form.Switch>\\n    <Form.Switch value=\\\"blue\\\">Blue</Form.Switch>\\n    <Form.Switch value=\\\"cyan\\\" disabled>Cyan</Form.Switch>\\n  </Form.SwitchSet>\\n</Form.Group>\\n\")), mdx(\"h3\", {\n    \"id\": \"indeterminate-usage\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#indeterminate-usage\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Indeterminate Usage\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"() => {\\n  const allCheeseOptions = ['swiss', 'cheddar', 'pepperjack'];\\n  const [checkedCheeses, { add, remove, set, clear }] = useCheckboxSetValues(['swiss']);\\n\\n  const handleChange = e => {\\n    e.target.checked ? add(e.target.value) : remove(e.target.value);\\n  };\\n\\n  const handleCheckAllChange = e => {\\n    e.target.checked ? set(allCheeseOptions) : clear();\\n  };\\n\\n  const allChecked = allCheeseOptions.every(value => checkedCheeses.includes(value));\\n  const someChecked = allCheeseOptions.some(value => checkedCheeses.includes(value));\\n  const isIndeterminate = someChecked && !allChecked;\\n\\n  return (\\n    <>\\n      <Form.Switch\\n        checked={allChecked}\\n        isIndeterminate={isIndeterminate}\\n        onChange={handleCheckAllChange}\\n      >\\n        All the cheese\\n      </Form.Switch>\\n      <Form.SwitchSet\\n        className=\\\"p-2\\\"\\n        value={checkedCheeses}\\n        onChange={handleChange}\\n      >\\n        <Form.Switch value=\\\"swiss\\\">Swiss</Form.Switch>\\n        <Form.Switch value=\\\"cheddar\\\">Cheddar</Form.Switch>\\n        <Form.Switch value=\\\"pepperjack\\\">Pepperjack</Form.Switch>\\n      </Form.SwitchSet>\\n    </>\\n  );\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"inline-layout\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#inline-layout\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Inline layout\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<Form.Group>\\n  <Form.Label>Which Color?</Form.Label>\\n  <Form.SwitchSet\\n    name=\\\"color-three\\\"\\n    onChange={(e) => console.log(e.target.value)}\\n    defaultValue={['green']}\\n    isInline\\n  >\\n    <Form.Switch value=\\\"red\\\">Red</Form.Switch>\\n    <Form.Switch value=\\\"green\\\">Green</Form.Switch>\\n    <Form.Switch value=\\\"blue\\\">Blue</Form.Switch>\\n    <Form.Switch value=\\\"cyan\\\" disabled>Cyan</Form.Switch>\\n  </Form.SwitchSet>\\n</Form.Group>\\n\")), mdx(\"h3\", {\n    \"id\": \"label-position\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#label-position\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Label Position\"), mdx(\"p\", null, \"The label is positioned to the right of the switch control by default. The label can be rendered on the left instead\\nby passing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"floatLabelLeft\"), \" prop.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<Form.Group>\\n  <Form.SwitchSet>\\n    <Form.Switch value=\\\"red\\\">Red</Form.Switch>\\n    <Form.Switch value=\\\"blue\\\" floatLabelLeft>Blue</Form.Switch>\\n  </Form.SwitchSet>\\n</Form.Group>\\n\")), mdx(\"h3\", {\n    \"id\": \"helper-text\"\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#helper-text\"\n  }, mdx(\"span\", {\n    parentName: \"a\",\n    \"className\": \"heading-icon-link\"\n  })), \"Helper Text\"), mdx(\"p\", null, \"A helper text component can be passed in to be rendered below the switch control.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"live\",\n    \"live\": true\n  }, \"<Form.Group>\\n  <Form.SwitchSet>\\n    <Form.Switch\\n      value=\\\"red\\\"\\n      helperText={\\n        <span>Helper text for red switch</span>\\n      }\\n    >\\n      Red\\n    </Form.Switch>\\n    <Form.Switch\\n      value=\\\"blue\\\"\\n      helperText={\\n        <span>Helper text for blue switch</span>\\n      }\\n    >\\n      Blue\\n    </Form.Switch>\\n  </Form.SwitchSet>\\n</Form.Group>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Form.Switch","status":"New","notes":"","components":["FormSwitch","SwitchControl"]}},"components":{"nodes":[{"displayName":"SwitchControl","props":[{"defaultValue":{"value":"false"},"name":"isIndeterminate","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"dcec219d-5b31-51b7-8723-68a380365ffe","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"f45fe2e3-adbf-5fde-af8f-8086ac54ff9c","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]},{"displayName":"FormSwitch","props":[{"defaultValue":null,"name":"children","type":{"name":"node","raw":null,"value":null},"required":true,"docblock":"","doclets":[],"description":{"id":"bdbeddca-7939-5ce6-9a4f-047d34ecbd1e","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"className","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"b5ea793a-8285-551c-9e5e-74aab99efd1d","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"labelClassName","type":{"name":"string","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"940f2c52-5ee0-5dfe-942d-6a90b1f2bef9","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"undefined"},"name":"helperText","type":{"name":"node","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"242c6bba-ae8b-5e38-9a4e-35dd6c8812b4","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}},{"defaultValue":{"value":"false"},"name":"floatLabelLeft","type":{"name":"bool","raw":null,"value":null},"required":false,"docblock":"","doclets":[],"description":{"id":"aa4fd17e-343e-5b37-bc9f-2ae92adc06b1","text":"","childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}}}]}]}},"pageContext":{"id":"07b0c1ef-6f86-5271-829e-fd78d8761932","components":["FormSwitch","SwitchControl"]}},"staticQueryHashes":["1303225137","3649515864","63159454"]}